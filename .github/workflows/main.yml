name: Band Auto Posting

on:
  workflow_dispatch:  # 수동 실행 가능
  schedule:
    - cron: '0 */1 * * *'  # 매 시간마다 실행

jobs:
  post:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y unzip shadowsocks-libev
        pip install selenium requests beautifulsoup4 webdriver_manager
        
    - name: Setup VPN
      run: |
        echo '{
          "server":"34.64.189.76",
          "server_port":16978,
          "password":"Nsy5l8wxxzHg4CXPKwEw6S",
          "method":"chacha20-ietf-poly1305",
          "local_address":"127.0.0.1",
          "local_port":1080
        }' > ss-config.json
        ss-local -c ss-config.json -v &
        sleep 5
        curl --socks5 127.0.0.1:1080 http://ip-api.com/json
        
    - name: Setup Chrome
      uses: browser-actions/setup-chrome@latest
      
    - name: Clean Chrome processes
      run: |
        echo "Chrome 프로세스 정리 중..."
        pkill -9 -f "chrome" || true
        pkill -9 -f "chromedriver" || true
        sleep 3
        
        # 모든 Chrome 관련 디렉토리 및 파일 정리
        rm -rf ~/.cache/google-chrome
        rm -rf ~/.config/google-chrome
        rm -rf /tmp/.org.chromium.Chromium*
        rm -rf /tmp/.com.google.Chrome*
        rm -rf /tmp/chrome_profile_*
        sleep 2

    - name: Setup Chrome Profile
      run: |
        # 기본 디렉토리 생성
        mkdir -p chrome_profile/Default
        
        # chrome_profile.zip이 있으면 압축 해제
        if [ -f "chrome_profile.zip" ]; then
          unzip -o chrome_profile.zip -d chrome_profile
        fi
        
        # 권한 설정
        chown -R $(id -u):$(id -g) chrome_profile
        chmod -R 755 chrome_profile
        
        # Cookies 파일 권한 특별 설정
        if [ -f "chrome_profile/Default/Cookies" ]; then
          chmod 666 chrome_profile/Default/Cookies
        fi
        
        # Debug 로그
        echo "프로필 디렉토리 구조:"
        ls -la chrome_profile/Default/
        
        # 환경 변수 설정
        echo "CHROME_PROFILE_DIR=$(pwd)/chrome_profile" >> $GITHUB_ENV

    - name: Check Directory Structure
      run: |
        pwd
        echo "현재 작업 디렉토리 구조:"
        ls -la

    - name: Run Auto Posting
      run: |
        # Chrome 옵션 설정
        export CHROME_OPTIONS="
          --user-data-dir=$(pwd)/chrome_profile
          --profile-directory=Default
          --no-sandbox
          --disable-dev-shm-usage
          --disable-gpu
          --disable-background-networking
          --disable-default-apps
          --disable-extensions
          --disable-sync
          --disable-translate
          --hide-scrollbars
          --metrics-recording-only
          --mute-audio
          --no-first-run
          --safebrowsing-disable-auto-update
        "
        
        # 프로필 상태 확인
        echo "Chrome 프로필 상태:"
        ls -la chrome_profile/Default/
        
        echo -e "\n\033[1;36m=== 밴드 자동 포스팅 시작 ===\033[0m"
        echo -e "\033[1;33m현재 시각: $(date '+%Y-%m-%d %H:%M:%S')\033[0m"
        echo -e "\033[1;36m======================================\033[0m\n"
        
        # 로그 파일 초기화 및 실시간 모니터링
        {
          echo "작업 시작 시간: $(date '+%Y-%m-%d %H:%M:%S')"
          echo "======================================="
          echo "1단계: 로그인 프로세스 시작"
          echo "======================================="
        } > band_auto.log
        
        # 스크립트 실행 및 실시간 로그 출력
        PYTHONUNBUFFERED=1 python auto_band_action.py 2>&1 | while IFS= read -r line; do
          timestamp=$(date '+%Y-%m-%d %H:%M:%S')
          
          # 로그인 관련 메시지 우선 처리
          case "$line" in
            *"driver.get("*|*"이동:"*|*"URL:"*)
              echo -e "\n\033[1;35m🌐 페이지 이동\033[0m"
              echo "[$timestamp] 현재 URL: ${line#*\'}"  # URL 부분만 추출
              echo "----------------------------------------"
              ;;
              
            *"밴드로 이동"*|*"URL 주소:"*)
              echo -e "\n\033[1;36m🔄 페이지 전환\033[0m"
              echo "[$timestamp] $line"
              echo "현재 작업: 밴드 페이지 로딩"
              echo "----------------------------------------"
              ;;
              
            *"로그인 시작"*|*"로그인 시도"*)
              echo -e "\n\033[1;34m🔐 로그인 프로세스 시작\033[0m"
              echo "[$timestamp] $line"
              ;;
            
            *"이메일 입력"*|*"비밀번호 입력"*)
              echo -e "\033[1;33m⌨️  $line\033[0m"
              echo "[$timestamp] $line"
              ;;
            
            *"로그인 성공"*)
              echo -e "\033[1;32m✅ 로그인 성공!\033[0m"
              echo "[$timestamp] $line"
              echo "----------------------------------------"
              ;;
              
            *"VPN 상태"*|*"현재 IP"*)
              echo -e "\033[1;36m🌐 $line\033[0m"
              echo "[$timestamp] $line"
              ;;
              
            *"로그인 시작"*)
              echo ""
              echo "🔵 ========= 로그인 프로세스 시작 ========="
              echo "[$timestamp] $line"
              echo "현재 단계: 로그인 페이지 접속 시도"
              ;;
              
            *"로그인 페이지 이동"*)
              echo "[$timestamp] ✓ 로그인 페이지 접속 완료"
              echo "현재 단계: 이메일 로그인 버튼 찾는 중"
              ;;
              
            *"이메일 로그인 버튼"*)
              echo "[$timestamp] ✓ 이메일 로그인 버튼 발견"
              echo "현재 단계: 이메일 입력 준비"
              ;;
              
            *"이메일 입력 완료"*)
              echo "[$timestamp] ✓ 이메일 입력 완료"
              echo "현재 단계: 다음 버튼 클릭"
              ;;
              
            *"다음 버튼 클릭"*)
              echo "[$timestamp] ✓ 다음 단계로 이동"
              echo "현재 단계: 비밀번호 입력 준비"
              ;;
              
            *"비밀번호 입력"*)
              echo "[$timestamp] 🔑 비밀번호 입력 중..."
              ;;
              
            *"비밀번호 입력 완료"*)
              echo "[$timestamp] ✓ 비밀번호 입력 완료"
              echo "현재 단계: 로그인 버튼 클릭"
              ;;
              
            *"로그인 버튼 클릭"*)
              echo "[$timestamp] 🔄 로그인 시도 중..."
              ;;
              
            *"로그인 성공"*)
              echo "[$timestamp] ✅ 로그인 성공!"
              echo "========= 로그인 프로세스 완료 ========="
              echo ""
              ;;
              
            *"로그인 실패"*|*"오류"*)
              echo "[$timestamp] ❌ 로그인 실패!"
              echo "에러 내용: $line"
              echo "========= 로그인 프로세스 실패 ========="
              echo ""
              ;;
              
            *"현재 작업 중인 URL"*)
              echo "🔗 ======= URL 작업 정보 ========"
              echo "[$timestamp] $line"
              ;;
              
            *"밴드로 이동"*|*"URL 주소:"*)
              echo "🌐 현재 페이지 이동"
              echo "[$timestamp] $line"
              ;;
              
            *"글쓰기 버튼"*)
              echo "📝 포스팅 작성 시작"
              echo "[$timestamp] $line"
              ;;
              
            *"URL 입력 중"*)
              echo "⌨️ URL 입력"
              echo "[$timestamp] $line"
              ;;
              
            *"미리보기 로딩"*)
              echo "⏳ 미리보기 로딩"
              echo "[$timestamp] $line"
              ;;
              
            *"포스팅 완료"*)
              echo "✅ ======= 포스팅 완료 ========"
              echo "[$timestamp] $line"
              echo "================================"
              ;;
              
            *"실패"*|*"오류"*)
              echo "❌ ======= 오류 발생 ========"
              echo "[$timestamp] $line"
              echo "=============================="
              ;;
              
            *"대기 시작"*|*"남은 시간"*)
              echo "⏰ 대기 상태"
              echo "[$timestamp] $line"
              ;;
              
            *)
              echo "[$timestamp] $line"
              ;;
          esac
          
          # URL 패턴 감지 및 로깅
          if [[ "$line" =~ https?:// ]]; then
            echo -e "\033[1;34m🔗 접속 URL: $line\033[0m"
          fi
          
          echo "[$timestamp] $line" >> band_auto.log
          
        done

        echo -e "\n=== 실행 통계 생성 ==="
        {
          echo "1. 로그인 프로세스"
          echo "- 시도 횟수: $(grep -c "로그인 시작" band_auto.log)"
          echo "- 성공 횟수: $(grep -c "로그인 성공" band_auto.log)"
          
          echo -e "\n2. URL 작업 현황"
          echo "- 처리된 URL 수: $(grep -c "현재 작업 중인 URL" band_auto.log)"
          echo "- 페이지 이동 수: $(grep -c "밴드로 이동" band_auto.log)"
          
          echo -e "\n3. 포스팅 통계"
          echo "- 글쓰기 시도: $(grep -c "글쓰기 버튼" band_auto.log)"
          echo "- 포스팅 성공: $(grep -c "포스팅 완료" band_auto.log)"
          echo "- 실패/오류: $(grep -c "실패\|오류" band_auto.log)"
          
          echo -e "\n4. 상세 URL 기록"
          echo "처리된 URL 목록:"
          grep "URL 주소:" band_auto.log
          
          echo -e "\n5. 마지막 작업 상태"
          tail -n 20 band_auto.log
          
        } | tee execution_summary.txt

      env:
        CHROME_PROFILE_PATH: "$(pwd)/chrome_profile"
        ALL_PROXY: "socks5://127.0.0.1:1080"
        CHROME_REMOTE_DEBUGGING_PORT: "9222"  # 원격 디버깅 포트 추가
        PYTHONUNBUFFERED: 1
        TZ: 'Asia/Seoul'
