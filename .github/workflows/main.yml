name: Band Auto Posting

on:
  workflow_dispatch:  # 수동 실행 가능
  schedule:
    - cron: '0 */1 * * *'  # 매 시간마다 실행

jobs:
  post:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: Configure Network Settings
      run: |
        # DNS 설정
        echo "nameserver 8.8.8.8" | sudo tee /etc/resolv.conf > /dev/null
        echo "nameserver 8.8.4.4" | sudo tee -a /etc/resolv.conf > /dev/null
        
        # 네트워크 설정
        sudo sysctl -w \
          net.ipv4.tcp_keepalive_time=60 \
          net.ipv4.tcp_keepalive_intvl=60 \
          net.ipv4.tcp_keepalive_probes=5 \
          net.core.rmem_max=2500000 \
          net.core.wmem_max=2500000
        
        # 시스템 리소스 제한 설정
        sudo sysctl -w \
          fs.inotify.max_user_watches=655360 \
          fs.inotify.max_user_instances=1280 \
          vm.max_map_count=262144
          
        # 프록시 환경변수 초기화
        unset http_proxy https_proxy HTTP_PROXY HTTPS_PROXY

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y unzip shadowsocks-libev curl wget
        pip install selenium requests beautifulsoup4 webdriver_manager

    - name: Setup Shadowsocks
      run: |
        # Shadowsocks 설정 파일 생성
        sudo mkdir -p /etc/shadowsocks-libev
        sudo tee /etc/shadowsocks-libev/config.json > /dev/null << EOF
        {
          "server": "34.64.189.76",
          "server_port": 16978,
          "password": "Nsy5l8wxxzHg4CXPKwEw6S",
          "method": "chacha20-ietf-poly1305",
          "mode": "tcp_and_udp",
          "local_address": "127.0.0.1",
          "local_port": 1080,
          "fast_open": true
        }
        EOF
        
        # Shadowsocks 서비스 시작
        sudo systemctl start shadowsocks-libev-local@config
        sleep 5
        
        # 실행 확인
        systemctl status shadowsocks-libev-local@config --no-pager
        ss -tulpn | grep 1080
        
        # 프록시 연결 테스트
        curl -x socks5h://127.0.0.1:1080 http://ip-api.com/json

    - name: Check VPN process
      run: |
        ps aux | grep sslocal
        echo "현재 Shadowsocks 프로세스 상태:"
        ss -tulpn | grep 1080 || true

    - name: Restart Shadowsocks Client
      run: |
        # 기존 프로세스 종료
        pkill -f sslocal || true
        sleep 2
        
        # 직접 실행으로 재시작
        nohup sslocal -s 34.64.189.76 -p 16978 -k "Nsy5l8wxxzHg4CXPKwEw6S" -m chacha20-ietf-poly1305 -l 1080 --udp-relay &
        sleep 5
        
        # 프록시 환경변수 설정
        export HTTPS_PROXY=socks5h://127.0.0.1:1080
        export HTTP_PROXY=socks5h://127.0.0.1:1080
        echo "HTTPS_PROXY=socks5h://127.0.0.1:1080" >> $GITHUB_ENV
        echo "HTTP_PROXY=socks5h://127.0.0.1:1080" >> $GITHUB_ENV
        
        # 연결 확인
        curl -x socks5h://127.0.0.1:1080 http://ip-api.com/json

    - name: Setup Chrome
      run: |
        echo "Installing Chrome directly..."
        wget -q -O /tmp/chrome.deb https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
        sudo apt-get install -y /tmp/chrome.deb
        rm /tmp/chrome.deb
        
        # 설치 확인
        google-chrome --version
        which google-chrome

    - name: Configure Network Settings
      run: |
        # Proxy configuration
        echo "Setting up proxy configuration..."
        
        # SOCKS proxy settings
        echo "
        {
          \"rules\": {
            \"fallbackProxy\": {
              \"scheme\": \"socks5\",
              \"host\": \"127.0.0.1\",
              \"port\": 1080
            }
          },
          \"mode\": \"fixed_servers\"
        }" > proxy.json
        
        # Set system proxy
        export ALL_PROXY=socks5://127.0.0.1:1080
        export HTTPS_PROXY=socks5h://127.0.0.1:1080
        export HTTP_PROXY=socks5h://127.0.0.1:1080
        
        # Network tuning
        sudo sysctl -w \
          net.ipv4.tcp_keepalive_time=30 \
          net.ipv4.tcp_keepalive_intvl=5 \
          net.ipv4.tcp_keepalive_probes=3 \
          net.ipv4.tcp_fin_timeout=10 \
          net.ipv4.tcp_retries2=5
        
        # Connection test with retry
        for i in {1..5}; do
          echo "Connection test attempt $i..."
          if curl -x socks5h://127.0.0.1:1080 -m 10 https://www.google.com > /dev/null 2>&1; then
            echo "Connection test successful!"
            break
          else
            echo "Connection test failed, retrying in 5 seconds..."
            sleep 5
          fi
        done

    - name: Verify Chrome Installation
      run: |
        if ! command -v google-chrome &> /dev/null; then
          echo "Chrome is not installed. Trying alternative installation..."
          # 대체 설치 방법
          sudo apt-get update
          sudo apt-get install -y wget
          wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
          sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list'
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable
        fi
        
        # 최종 설치 확인
        echo "Installed Chrome version:"
        google-chrome --version
        echo "Chrome binary location:"
        which google-chrome

    - name: Install ChromeDriver
      run: |
        # Chrome 버전 확인
        CHROME_VERSION=$(google-chrome --version | awk '{print $3}')
        CHROME_MAJOR_VERSION=$(echo "$CHROME_VERSION" | cut -d. -f1)
        echo "설치된 Chrome 버전: $CHROME_VERSION"
        
        # Chrome for Testing API에서 매칭되는 ChromeDriver 찾기
        API_URL="https://googlechromelabs.github.io/chrome-for-testing/known-good-versions-with-downloads.json"
        MATCHING_DRIVER=$(curl -s "$API_URL" | \
          jq -r ".versions[] | 
          select(.version | startswith(\"$CHROME_MAJOR_VERSION.\")) |
          .downloads.chromedriver[] | 
          select(.platform==\"linux64\").url" | head -1)
        
        if [ -z "$MATCHING_DRIVER" ]; then
          echo "호환되는 ChromeDriver를 찾을 수 없습니다."
          exit 1
        fi
        
        echo "다운로드할 ChromeDriver URL: $MATCHING_DRIVER"
        
        # ChromeDriver 다운로드 및 설치
        wget -q "$MATCHING_DRIVER" -O chromedriver.zip
        unzip -o chromedriver.zip
        sudo mv chromedriver-linux64/chromedriver /usr/local/bin/
        sudo chmod +x /usr/local/bin/chromedriver
        rm -rf chromedriver.zip chromedriver-linux64
        
        # 버전 확인
        echo "=== 설치된 버전 정보 ==="
        google-chrome --version
        chromedriver --version

    - name: Download Chrome Profile
      run: |
        echo "Chrome 프로필 다운로드 중..."
        wget https://github.com/sd2624/qqqq071026242/raw/master/chrome_profile.zip -O chrome_profile.zip
        
        if [ ! -f "chrome_profile.zip" ]; then
          echo "프로필 다운로드 실패"
          exit 1
        fi
        
        echo "프로필 다운로드 완료"
        ls -la chrome_profile.zip
        
    - name: Check Profile Archive
      run: |
        if [ ! -f "chrome_profile.zip" ]; then
          echo "chrome_profile.zip not found!"
          exit 1
        fi
        echo "Found chrome_profile.zip"
        
    - name: Clean Chrome Processes
      run: |
        # 기존 Chrome 프로세스 강제 종료
        echo "기존 Chrome 프로세스 정리 중..."
        pgrep -x "chrome" && pkill -9 "chrome"
        pgrep -x "chromedriver" && pkill -9 "chromedriver"
        sleep 2

    - name: Kill existing Chrome processes
      run: pkill -9 chrome || true
      
    - name: Extract Chrome Profile
      run: |
        unzip chrome_profile.zip -d chrome-profile
        chmod -R 777 chrome-profile
        echo "CHROME_PROFILE_DIR=$(pwd)/chrome-profile" >> $GITHUB_ENV
        ls -la chrome-profile/Default/

    - name: Start Xvfb
      run: Xvfb :99 -screen 0 1920x1080x24 &

    - name: Set Display
      run: echo "DISPLAY=:99" >> $GITHUB_ENV

    - name: Setup Chrome Profile
      run: |
        # 고유한 프로필 디렉토리 설정
        PROFILE_DIR="/tmp/chrome-profile-${GITHUB_RUN_ID}"
        echo "프로필 디렉토리: $PROFILE_DIR"
        
        # 기존 프로필 완전 제거
        sudo rm -rf "$PROFILE_DIR"
        mkdir -p "$PROFILE_DIR/Default"
        
        # 프로필 압축 해제
        echo "프로필 설정 중..."
        unzip -o chrome_profile.zip -d "$PROFILE_DIR" || {
          echo "프로필 압축 해제 실패"
          exit 1
        }
        
        # 권한 설정
        sudo chown -R runner:docker "$PROFILE_DIR"
        chmod -R 755 "$PROFILE_DIR"
        
        # 초기 디렉토리 구조 설정
        for dir in "Cache" "Local Storage" "Session Storage" "Network" "Extension State"; do
          mkdir -p "$PROFILE_DIR/Default/$dir"
          chmod 755 "$PROFILE_DIR/Default/$dir"
        done
        
        # 환경 변수 설정
        {
          echo "CHROME_PROFILE_DIR=$PROFILE_DIR"
          echo "CHROME_BIN=/usr/bin/google-chrome-stable"
        } >> $GITHUB_ENV
        
        echo "프로필 구조:"
        ls -la "$PROFILE_DIR/Default/"

    - name: Configure Chrome Profile
      run: |
        PROFILE_DIR="${CHROME_PROFILE_DIR}"
        
        # 필수 파일 확인
        required_files=("Preferences" "Cookies" "Login Data")
        for file in "${required_files[@]}"; do
          if [ ! -f "$PROFILE_DIR/Default/$file" ]; then
            echo "생성: $file"
            touch "$PROFILE_DIR/Default/$file"
            chmod 644 "$PROFILE_DIR/Default/$file"
          fi
        done
        
        # 중요 디렉토리 권한 설정
        for dir in "Cache" "Local Storage" "Session Storage" "Network"; do
          dir_path="$PROFILE_DIR/Default/$dir"
          if [ -d "$dir_path"]; then
            find "$dir_path" -type d -exec chmod 755 {} \;
            find "$dir_path" -type f -exec chmod 644 {} \;
          fi
        done
        
        echo "프로필 구성 완료:"
        ls -la "$PROFILE_DIR/Default/"

    - name: Check and Setup Required Directories
      run: |
        # 프로필 디렉토리 확인
        PROFILE_DIR="${CHROME_PROFILE_DIR}"
        echo "프로필 디렉토리: $PROFILE_DIR"
        
        # 캐시 디렉토리 초기화
        rm -rf "$PROFILE_DIR/Default/Cache"/*
        mkdir -p "$PROFILE_DIR/Default/Cache"
        
        # 필수 디렉토리 생성
        for dir in "Local Storage" "Session Storage" "Network"; do
          mkdir -p "$PROFILE_DIR/Default/$dir"
          chmod 755 "$PROFILE_DIR/Default/$dir"
        done
        
        # 프로필 구조 확인
        echo "프로필 구조 확인:"
        ls -la "$PROFILE_DIR/Default/"

    - name: Check Directory Structure
      run: |
        pwd
        echo "현재 작업 디렉토리 구조:"
        ls -la

    - name: Run Auto Posting
      env:
        CHROME_PROFILE_PATH: ${CHROME_PROFILE_DIR}
        XDG_CONFIG_HOME: ${CHROME_PROFILE_DIR}
        DISPLAY: :99
        ALL_PROXY: "socks5://127.0.0.1:1080"
        HTTPS_PROXY: "socks5h://127.0.0.1:1080"
        HTTP_PROXY: "socks5h://127.0.0.1:1080"
        CHROME_REMOTE_DEBUGGING_PORT: "9222"
        PYTHONUNBUFFERED: 1
        TZ: "Asia/Seoul"
      run: |
        # Chrome 옵션에 프록시 설정 추가
        export CHROME_OPTIONS="
          --user-data-dir=${CHROME_PROFILE_DIR}
          --profile-directory=Default
          --no-sandbox
          --disable-dev-shm-usage
          --password-store=basic
          --disable-gpu
          --proxy-server=socks5://127.0.0.1:1080
        "
        
        # 스크립트 실행
        PYTHONUNBUFFERED=1 python auto_band_action.py

        echo -e "\n\033[1;36m=== 밴드 자동 포스팅 시작 ===\033[0m"
        echo -e "\033[1;33m현재 시각: $(date '+%Y-%m-%d %H:%M:%S')\033[0m"
        echo -e "\033[1;36m======================================\033[0m\n"
        
        # 로그 파일 초기화 및 실시간 모니터링
        {
          echo "작업 시작 시간: $(date '+%Y-%m-%d %H:%M:%S')"
          echo "======================================="
          echo "1단계: 로그인 프로세스 시작"
          echo "======================================="
        } > band_auto.log
        
        # 스크립트 실행 및 실시간 로그 출력
        PYTHONUNBUFFERED=1 python auto_band_action.py 2>&1 | while IFS= read -r line; do
          timestamp=$(date '+%Y-%m-%d %H:%M:%S')
          
          # 로그인 관련 메시지 우선 처리
          case "$line" in
            *"driver.get("*|*"이동:"*|*"URL:"*)
              echo -e "\n\033[1;35m🌐 페이지 이동\033[0m"
              echo "[$timestamp] 현재 URL: ${line#*\'}"  # URL 부분만 추출
              echo "----------------------------------------"
              ;;
              
            *"밴드로 이동"*|*"URL 주소:"*)
              echo -e "\n\033[1;36m🔄 페이지 전환\033[0m"
              echo "[$timestamp] $line"
              echo "현재 작업: 밴드 페이지 로딩"
              echo "----------------------------------------"
              ;;
              
            *"로그인 시작"*|*"로그인 시도"*)
              echo -e "\n\033[1;34m🔐 로그인 프로세스 시작\033[0m"
              echo "[$timestamp] $line"
              ;;
            
            *"이메일 입력"*|*"비밀번호 입력"*)
              echo -e "\033[1;33m⌨️  $line\033[0m"
              echo "[$timestamp] $line"
              ;;
            
            *"로그인 성공"*)
              echo -e "\033[1;32m✅ 로그인 성공!\033[0m"
              echo "[$timestamp] $line"
              echo "----------------------------------------"
              ;;
              
            *"VPN 상태"*|*"현재 IP"*)
              echo -e "\033[1;36m🌐 $line\033[0m"
              echo "[$timestamp] $line"
              ;;
              
            *"로그인 시작"*)
              echo ""
              echo "🔵 ========= 로그인 프로세스 시작 ========="
              echo "[$timestamp] $line"
              echo "현재 단계: 로그인 페이지 접속 시도"
              ;;
              
            *"로그인 페이지 이동"*)
              echo "[$timestamp] ✓ 로그인 페이지 접속 완료"
              echo "현재 단계: 이메일 로그인 버튼 찾는 중"
              ;;
              
            *"이메일 로그인 버튼"*)
              echo "[$timestamp] ✓ 이메일 로그인 버튼 발견"
              echo "현재 단계: 이메일 입력 준비"
              ;;
              
            *"이메일 입력 완료"*)
              echo "[$timestamp] ✓ 이메일 입력 완료"
              echo "현재 단계: 다음 버튼 클릭"
              ;;
              
            *"다음 버튼 클릭"*)
              echo "[$timestamp] ✓ 다음 단계로 이동"
              echo "현재 단계: 비밀번호 입력 준비"
              ;;
              
            *"비밀번호 입력"*)
              echo "[$timestamp] 🔑 비밀번호 입력 중..."
              ;;
              
            *"비밀번호 입력 완료"*)
              echo "[$timestamp] ✓ 비밀번호 입력 완료"
              echo "현재 단계: 로그인 버튼 클릭"
              ;;
              
            *"로그인 버튼 클릭"*)
              echo "[$timestamp] 🔄 로그인 시도 중..."
              ;;
              
            *"로그인 성공"*)
              echo "[$timestamp] ✅ 로그인 성공!"
              echo "========= 로그인 프로세스 완료 ========="
              echo ""
              ;;
              
            *"로그인 실패"*|*"오류"*)
              echo "[$timestamp] ❌ 로그인 실패!"
              echo "에러 내용: $line"
              echo "========= 로그인 프로세스 실패 ========="
              echo ""
              ;;
              
            *"현재 작업 중인 URL"*)
              echo "🔗 ======= URL 작업 정보 ========"
              echo "[$timestamp] $line"
              ;;
              
            *"밴드로 이동"*|*"URL 주소:"*)
              echo "🌐 현재 페이지 이동"
              echo "[$timestamp] $line"
              ;;
              
            *"글쓰기 버튼"*)
              echo "📝 포스팅 작성 시작"
              echo "[$timestamp] $line"
              ;;
              
            *"URL 입력 중"*)
              echo "⌨️ URL 입력"
              echo "[$timestamp] $line"
              ;;
              
            *"미리보기 로딩"*)
              echo "⏳ 미리보기 로딩"
              echo "[$timestamp] $line"
              ;;
              
            *"포스팅 완료"*)
              echo "✅ ======= 포스팅 완료 ========"
              echo "[$timestamp] $line"
              echo "================================"
              ;;
              
            *"실패"*|*"오류"*)
              echo "❌ ======= 오류 발생 ========"
              echo "[$timestamp] $line"
              echo "=============================="
              ;;
              
            *"대기 시작"*|*"남은 시간"*)
              echo "⏰ 대기 상태"
              echo "[$timestamp] $line"
              ;;
              
            *)
              echo "[$timestamp] $line"
              ;;
          esac
          
          # URL 패턴 감지 및 로깅
          if [[ "$line" =~ https?:// ]]; then
            echo -e "\033[1;34m🔗 접속 URL: $line\033[0m"
          fi
          
          echo "[$timestamp] $line" >> band_auto.log
          
        done

        echo -e "\n=== 실행 통계 생성 ==="
        {
          echo "1. 로그인 프로세스"
          echo "- 시도 횟수: $(grep -c "로그인 시작" band_auto.log)"
          echo "- 성공 횟수: $(grep -c "로그인 성공" band_auto.log)"
          
          echo -e "\n2. URL 작업 현황"
          echo "- 처리된 URL 수: $(grep -c "현재 작업 중인 URL" band_auto.log)"
          echo "- 페이지 이동 수: $(grep -c "밴드로 이동" band_auto.log)"
          
          echo -e "\n3. 포스팅 통계"
          echo "- 글쓰기 시도: $(grep -c "글쓰기 버튼" band_auto.log)"
          echo "- 포스팅 성공: $(grep -c "포스팅 완료" band_auto.log)"
          echo "- 실패/오류: $(grep -c "실패\|오류" band_auto.log)"
          
          echo -e "\n4. 상세 URL 기록"
          echo "처리된 URL 목록:"
          grep "URL 주소:" band_auto.log
          
          echo -e "\n5. 마지막 작업 상태"
          tail -n 20 band_auto.log
          
        } | tee execution_summary.txt

